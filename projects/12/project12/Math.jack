// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static int qy2; // this variable is used in divide function
    static Array twoToThe; // 2twoToThe(i)

    /** Initializes the library. */
    function void init() {
    	let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;
        return;
    }
    
    // Returns true if the i-th bit of x is 1, false otherwise
    function boolean bit(int x, int i) {
    	return x & twoToThe[i];
    }

    function int binExp(int i) {
        if((i > -1) & (i < 16)) {
            return twoToThe[i];
        }
        return 0;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x < 0) { return -x; }
        else { return x; }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack twoToTheressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shifted_x, i;
        let sum = 0;
        let shifted_x = x;
        let i = 0;
        while (i < 16) {
            if(Math.bit(y, i)) { let sum = sum + shifted_x; }
            let shifted_x = shifted_x + shifted_x;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack twoToTheressions x/y and divide(x,y) return the same value.
     */
     // See https://www.coursera.org/learn/nand2tetris2/discussions/all/threads/V5_TwIAZEeik-A4opjoQsg
     // for more twoToThelanation
    function int divide(int x, int y) {
        var int q;
        var boolean sign;
        let sign = ((x < 0) = (y < 0)); // true if same sign
        let x = Math.abs(x);
        let y = Math.abs(y);
        
        if(y > x) {
        	let qy2 = 0;
            return 0;
        }
        if(y = 0) {
        	do Output.printString("Error: Division by 0");
        	do Sys.halt();
        	return -1;	// error
        }

        let q = Math.divide(x, y + y);

        if((x - qy2) < y) { let q = q + q;} 
        else {
        	let qy2 = qy2 + y;
            let q = q + q + 1;
        }
   
        if(~sign) { let q = -q; }
        return q;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, p;
        let y = 0;
        let j = 7;
        while(j > -1) {
        	let p = y + twoToThe[j];
        	let p = p * p;
        	if((p > 0) & ((p - 1) < x)) { let y = y + twoToThe[j]; }
        	let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a > b) { return a; }
        else { return b; }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a < b) { return a; }
        else { return b; }
    }
}
