// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	field Array charArray;
	field int capacity, size;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		let maxLength = Math.max(1, maxLength);
    	let charArray = Array.new(maxLength);
    	let capacity = maxLength;
    	let size = 0;
    	return this;
    }

    /** Disposes this string. */
    method void dispose() {
    	do charArray.dispose(); 
    	return;	
    }

    /** Returns the current length of this string. */
    method int length() { return size; }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) { return charArray[j]; }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
    	let charArray[j] = c;
    	return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
    	if(size < capacity) {
    		let charArray[size] = c;
    		let size = size + 1;
    	} 
    	return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
    	if(size > 0) { let size = size - 1; }
    	return;	
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
    	var int val, i;
    	var boolean positive;

    	let val = 0;
    	let i = 0;
    	let positive = true;

		if((size > 0) & (charArray[0] = 45)) {
    		let positive = false;
    		let i = 1;
    	}
    	while(i < size) {
    		let val = (val * 10) + (charArray[i] - 48);
    		let i = i + 1;
    	}
    	if(~positive) { let val = -val; }
    	
		return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
    	let size = 0;
    	if(val < 0) {
    		let val = -val;
    		do appendChar(45);
    	}
    	do int2String(val);
    	return;
    }
    
    // private helper function
    method void int2String(int val) {
    	var int lastDigit;
    	var char c;

    	let lastDigit = val / 10;
    	let lastDigit = val - (lastDigit * 10);
    	let c = (lastDigit + 48);
    	
    	if((size < capacity) & (val > 9)) { do int2String(val/10); } 
    	if(size < capacity) { do appendChar(c); }
    	return;
    }

    /** Returns the new line character. */
    function char newLine() { return 128; }

    /** Returns the backspace character. */
    function char backSpace() { return 129; }

    /** Returns the double quote (") character. */
    function char doubleQuote() { return 34; }
}
