// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    //Or16(a[0..5]=address ,b=false ,out[3..5]=hi ,out[0..2]=lo ); /* 16-bit Or */
    DMux8Way(in=load ,sel=address[3..5] ,a=l0 ,b=l1 ,c=l2 ,d=l3 ,e=l4 ,f=l5 ,g=l6 ,h=l7 ); /* Channels the input to one out of eight outputs */
    RAM8(in=in ,load=l0 ,address=address[0..2] ,out=out0 ); /* 8-word RAM */
    RAM8(in=in ,load=l1 ,address=address[0..2] ,out=out1 ); /* 8-word RAM */
    RAM8(in=in ,load=l2 ,address=address[0..2] ,out=out2 ); /* 8-word RAM */
    RAM8(in=in ,load=l3 ,address=address[0..2] ,out=out3 ); /* 8-word RAM */
    RAM8(in=in ,load=l4 ,address=address[0..2] ,out=out4 ); /* 8-word RAM */
    RAM8(in=in ,load=l5 ,address=address[0..2] ,out=out5 ); /* 8-word RAM */
    RAM8(in=in ,load=l6 ,address=address[0..2] ,out=out6 ); /* 8-word RAM */
    RAM8(in=in ,load=l7 ,address=address[0..2] ,out=out7 ); /* 8-word RAM */

    Mux8Way16(a=out0 ,b=out1 ,c=out2 ,d=out3 ,e=out4 ,f=out5 ,g=out6 ,h=out7 ,sel=address[3..5] ,out=out ); /* Selects between eight 16-bit inputs */
}
